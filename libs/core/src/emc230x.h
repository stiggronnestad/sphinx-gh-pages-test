//
// EMC2303/5 Fan Controller
// https://www.microchip.com/en-us/product/EMC2303#document-table
//

#ifndef EVERT_CORE_EMC230X_H_
#define EVERT_CORE_EMC230X_H_

#include "_conf_evert_hal.h"

#ifdef EVERT_HAL_CONF_EMC230X_ADDRESS
#define EMC230X_ADDRESS EVERT_HAL_CONF_EMC230X_ADDRESS
#else
#define EMC230X_ADDRESS (0x002C)
#endif

#ifdef EVERT_HAL_CONF_EMC230x_TYPE
#if EVERT_HAL_CONF_EMC230x_TYPE == 2303
#define EMC230X_TYPE_2303
#elif EVERT_HAL_CONF_EMC230x_TYPE == 2305
#define EMC230X_TYPE_2305
#else
#define EMC230X_TYPE_2303
#endif
#endif

#define EMC2303_REG_CONFIG_RANGE_500 (0x00)
#define EMC2303_REG_CONFIG_RANGE_1000 (0x01)
#define EMC2303_REG_CONFIG_RANGE_2000 (0x02)
#define EMC2303_REG_CONFIG_RANGE_4000 (0x03)
#define EMC2303_REG_CONFIG_RANGE_MASK (0x03)

#define EMC2303_REG_CONFIG_RANGE_500_M (1)
#define EMC2303_REG_CONFIG_RANGE_1000_M (2)
#define EMC2303_REG_CONFIG_RANGE_2000_M (4)
#define EMC2303_REG_CONFIG_RANGE_4000_M (8)

// Base addresses for each fan
#define EMC230X_REG_FAN1_BASE (0x30)
#define EMC230X_REG_FAN2_BASE (0x40)
#define EMC230X_REG_FAN3_BASE (0x50)
#ifdef EMC230X_TYPE_2305
#define EMC230X_REG_FAN4_BASE (0x60)
#define EMC230X_REG_FAN5_BASE (0x70)
#endif
#define EMC230X_GET_REGISTER(base, offset) (base + offset)

#define EMC230X_REG_FANX_SETTING(base) EMC230X_GET_REGISTER(base, 0x00)
#define EMC230X_REG_FANX_CONFIGURATION1(base) EMC230X_GET_REGISTER(base, 0x02)
#define EMC230X_REG_FANX_CONFIGURATION2(base) EMC230X_GET_REGISTER(base, 0x03)
#define EMC230X_REG_FANX_TACH_HIGH(base) EMC230X_GET_REGISTER(EMC230X_REG_FANX_SETTING(base), 0x0E)
#define EMC230X_REG_FANX_TACH_LOW(base) EMC230X_GET_REGISTER(EMC230X_REG_FANX_SETTING(base), 0x0F)

// Fan 1
#define EMC230X_REG_FAN1_SETTING EMC230X_REG_FANX_SETTING(EMC230X_REG_FAN1_BASE)
#define EMC230X_REG_FAN1_CONFIGURATION1 EMC230X_REG_FANX_CONFIGURATION1(EMC230X_REG_FAN1_BASE)
#define EMC230X_REG_FAN1_CONFIGURATION2 EMC230X_REG_FANX_CONFIGURATION2(EMC230X_REG_FAN1_BASE)
#define EMC230X_REG_FAN1_TACH_HIGH EMC230X_REG_FANX_TACH_HIGH(EMC230X_REG_FAN1_BASE)
#define EMC230X_REG_FAN1_TACH_LOW EMC230X_REG_FANX_TACH_LOW(EMC230X_REG_FAN1_BASE)

// Fan 2
#define EMC230X_REG_FAN2_SETTING EMC230X_REG_FANX_SETTING(EMC230X_REG_FAN2_BASE)
#define EMC230X_REG_FAN2_CONFIGURATION1 EMC230X_REG_FANX_CONFIGURATION1(EMC230X_REG_FAN2_BASE)
#define EMC230X_REG_FAN2_CONFIGURATION2 EMC230X_REG_FANX_CONFIGURATION2(EMC230X_REG_FAN2_BASE)
#define EMC230X_REG_FAN2_TACH_HIGH EMC230X_REG_FANX_TACH_HIGH(EMC230X_REG_FAN2_BASE)
#define EMC230X_REG_FAN2_TACH_LOW EMC230X_REG_FANX_TACH_LOW(EMC230X_REG_FAN2_BASE)

// Fan 3
#define EMC230X_REG_FAN3_SETTING EMC230X_REG_FANX_SETTING(EMC230X_REG_FAN3_BASE)
#define EMC230X_REG_FAN3_CONFIGURATION1 EMC230X_REG_FANX_CONFIGURATION1(EMC230X_REG_FAN3_BASE)
#define EMC230X_REG_FAN3_CONFIGURATION2 EMC230X_REG_FANX_CONFIGURATION2(EMC230X_REG_FAN3_BASE)
#define EMC230X_REG_FAN3_TACH_HIGH EMC230X_REG_FANX_TACH_HIGH(EMC230X_REG_FAN3_BASE)
#define EMC230X_REG_FAN3_TACH_LOW EMC230X_REG_FANX_TACH_LOW(EMC230X_REG_FAN3_BASE)

#ifdef EMC230X_TYPE_2305
// Fan 4
#define EMC230X_REG_FAN4_SETTING EMC230X_REG_FANX_SETTING(EMC230X_REG_FAN4_BASE)
#define EMC230X_REG_FAN4_CONFIGURATION1 EMC230X_REG_FANX_CONFIGURATION1(EMC230X_REG_FAN4_BASE)
#define EMC230X_REG_FAN4_CONFIGURATION2 EMC230X_REG_FANX_CONFIGURATION2(EMC230X_REG_FAN4_BASE)
#define EMC230X_REG_FAN4_TACH_HIGH EMC230X_REG_FANX_TACH_HIGH(EMC230X_REG_FAN4_BASE)
#define EMC230X_REG_FAN4_TACH_LOW EMC230X_REG_FANX_TACH_LOW(EMC230X_REG_FAN4_BASE)

// Fan 5
#define EMC230X_REG_FAN5_SETTING EMC230X_REG_FANX_SETTING(EMC230X_REG_FAN5_BASE)
#define EMC230X_REG_FAN5_CONFIGURATION1 EMC230X_REG_FANX_CONFIGURATION1(EMC230X_REG_FAN5_BASE)
#define EMC230X_REG_FAN5_CONFIGURATION2 EMC230X_REG_FANX_CONFIGURATION2(EMC230X_REG_FAN5_BASE)
#define EMC230X_REG_FAN5_TACH_HIGH EMC230X_REG_FANX_TACH_HIGH(EMC230X_REG_FAN5_BASE)
#define EMC230X_REG_FAN5_TACH_LOW EMC230X_REG_FANX_TACH_LOW(EMC230X_REG_FAN5_BASE)
#endif

#include <stm32g4xx_hal.h>

typedef enum
{
    EVERT_EMC230X_FAN1 = 1,
    EVERT_EMC230X_FAN2 = 2,
    EVERT_EMC230X_FAN3 = 3
#ifdef EMC230X_TYPE_2305
    ,
    EVERT_EMC230X_FAN4 = 4,
    EVERT_EMC230X_FAN5 = 5
#endif
} EVERT_EMC230X_Fan;

typedef enum
{
    EVERT_EMC230X_RX_ACTION_NONE = 0,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN1_HIGH = 1,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN1_LOW = 2,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN2_HIGH = 3,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN2_LOW = 4,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN3_HIGH = 5,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN3_LOW = 6
#ifdef EMC230X_TYPE_2305
    ,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN4_HIGH = 7,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN4_LOW = 8,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN5_HIGH = 9,
    EVERT_EMC230X_RX_ACTION_READ_TACHS_FAN5_LOW = 10
#endif
} EVERT_EMC230X_RxAction;

typedef enum
{
    EVERT_EMC230X_TX_ACTION_NONE = 0,
    EVERT_EMC230X_TX_ACTION_SET_SINGLE_FAN_SPEED = 1,
    EVERT_EMC230X_TX_ACTION_SET_ALL_FAN1_SPEED = 2,
    EVERT_EMC230X_TX_ACTION_SET_ALL_FAN2_SPEED = 3,
    EVERT_EMC230X_TX_ACTION_SET_ALL_FAN3_SPEED = 4
#ifdef EMC230X_TYPE_2305
    ,
    EVERT_EMC230X_TX_ACTION_SET_ALL_FAN4_SPEED = 5,
    EVERT_EMC230X_TX_ACTION_SET_ALL_FAN5_SPEED = 6
#endif
} EVERT_EMC230X_TxAction;

typedef struct
{
    uint8_t tach_high;
    uint8_t tach_low;
    uint16_t tach;
    uint16_t rpm;
    uint8_t speed;
} EVERT_EMC230X_DataTypeDef;

extern I2C_HandleTypeDef hi2c1;

void EVERT_EMC230X_Init();
void EVERT_EMC230X_SetAllFanSpeeds_IT(uint8_t speed);
void EVERT_EMC230X_SetFanSpeed_IT(const EVERT_EMC230X_Fan fan, uint8_t speed);
void EVERT_EMC230X_SetRangeRegister_IT(const uint8_t range);
void EVERT_EMC230X_SetRxAction(const EVERT_EMC230X_RxAction action);
void EVERT_EMC230X_SetTxAction(const EVERT_EMC230X_TxAction action);
void EVERT_EMC230X_ReadTachs_IT();
void EVERT_EMC230X_OnErrorReceived();

#endif // EVERT_CORE_EMC230X_H_